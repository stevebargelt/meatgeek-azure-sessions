# Builds the MeatGeek sessions microservice resources

name: $(BuildID)
steps:
  - task: Bash@3
    inputs:
      targetType: "inline"
      script: |
        echo "Before TechDocs"
        echo "Structure of build.artifactstagingdirectory folder of this pipeline:"
        tree $(build.artifactstagingdirectory) /f

        echo "Structure of Build.SourcesDirectory folder of this pipeline:"
        tree $(Build.SourcesDirectory) /f

        echo "Build.ArtifactStagingDirectory:" 

        echo "$(Build.ArtifactStagingDirectory)"

        echo "Build.BinariesDirectory:" 

        echo "$(Build.BinariesDirectory)"

        echo "Build.SourcesDirectory:"

        echo "$(Build.SourcesDirectory)"

  - task: UsePythonVersion@0
    inputs:
      versionSpec: "3.x"
      addToPath: true
      architecture: "x64"
      displayName: "Setup Environment"

  # Upgrade pip
  - task: Bash@3
    inputs:
      targetType: "inline"
      script: |
        sudo python -m pip install --upgrade pip
      displayName: "Upgrading pip"
      continueOnError: false

  # Generate TechDocs
  - task: Bash@3
    inputs:
      targetType: "inline"
      script: |
        # Install @techdocs/cli, mkdocs and mkdocs plugins
        sudo npm install -g --unsafe-perm=true --allow-root @techdocs/cli 

        sudo pip install mkdocs-techdocs-core==0.*

        # Generate
        sudo techdocs-cli generate --no-docker --source-dir $(Build.SourcesDirectory)/docs

  - task: Bash@3
    inputs:
      targetType: "inline"
      script: |
        echo "After TechDocs"
        echo "Structure of build.artifactstagingdirectory folder of this pipeline:"
        tree $(build.artifactstagingdirectory) /f

        echo "Structure of Build.SourcesDirectory folder of this pipeline:"
        tree $(Build.SourcesDirectory) /f

        echo "Build.ArtifactStagingDirectory:" 

        echo "$(Build.ArtifactStagingDirectory)"

        echo "Build.BinariesDirectory:" 

        echo "$(Build.BinariesDirectory)"

        echo "Build.SourcesDirectory:"

        echo "$(Build.SourcesDirectory)"

  # Build the APIs
  - task: DotNetCoreCLI@1
    displayName: Run dotnet restore
    inputs:
      command: "restore"
      projects: "src/**/*.csproj"

  - task: DotNetCoreCLI@1
    displayName: Run dotnet build
    inputs:
      projects: "src/**/*.csproj"

  - task: DotNetCoreCLI@1
    displayName: Run dotnet publish
    inputs:
      command: "publish"
      publishWebProjects: "False"
      projects: "src/**/*Api.csproj"
      arguments: "--output $(build.artifactstagingdirectory)"
      zipAfterPublish: "True"

  # Publish the APIs as an artifact
  - task: PublishBuildArtifacts@1
    displayName: Publish Azure Functions
    inputs:
      pathToPublish: $(build.artifactstagingdirectory)
      artifactName: functions
      artifactType: container

  # Publish the `deploy` folder as an artifact
  - task: PublishBuildArtifacts@1
    displayName: Publish Deployment Scripts
    inputs:
      pathToPublish: deploy
      artifactName: deploy
      artifactType: container

  # Publish the Docs as an artifact
  - task: PublishBuildArtifacts@1
    displayName: Publish TechDocs
    inputs:
      pathToPublish: docs
      artifactName: docs
      artifactType: container
